{"version":3,"file":"microplugin.font-size.js","sources":["../../src/constants.ts","../../src/utils/css.ts","../../src/utils/options.ts","../../src/utils/microplugin.ts","../../src/plugins/micro/font-size.ts"],"sourcesContent":["export const supolkaAt = \"supolka\";\nexport const sectionAt = \"section\";\n\nexport const normalizeChunk = \"normalize-css\";\nexport const atomicChunk = \"atomic-css\";\n","import { Dictionary, get, map, isArray, tap, isPlainObject, omit, trimEnd } from \"lodash\";\nimport { CssOptions, PurgeCssOptions, PurgeCssRawContent, SupolkaPluginOption } from \"../types\";\nimport postcss, { AtRule, Comment, Node, Root } from \"postcss\";\nimport postcssSelectorParser from \"postcss-selector-parser\";\nimport postcssNested from \"postcss-nested\";\nimport * as postcssJs from \"postcss-js\";\nimport purgecss from \"@fullhuman/postcss-purgecss\";\nimport tags from \"html-tags\";\nimport { atomicChunk, normalizeChunk, supolkaAt } from \"../constants\";\n\nexport const useClassName = (root: string, mod?: string): string => {\n    const className = mod ? `${root}-${mod}` : root;\n    return asClass(escapeClassName(className));\n};\n\nexport function parseCss(css: Dictionary<CssOptions>): Promise<Node[]>;\nexport function parseCss(css: { [key: string]: SupolkaPluginOption }): Promise<Node[]>;\nexport function parseCss(css: object): Promise<Node[]> {\n    const output = postcss([postcssNested()]).process(css, { parser: postcssJs });\n\n    return Promise.resolve(output.root.nodes);\n};\n\nexport const parsePlainCss = (input: string): Root => {\n    return postcss.parse(input);\n};\n\nexport const escapeCommas = (className: string) => className.replace(/\\\\,/g, \"\\\\2c\");\n\nexport const escapeDots = (className: string) => className.replace(/\\./g, \"\\\\2e\");\n\nexport const escapeClassName = (className: string): string => {\n    const node = postcssSelectorParser.className({ value: className });\n    return escapeDots(escapeCommas(get(node, \"raws.value\", node.value)));\n};\n\nexport const asClass = (className: string): string => `.${className}`;\n\nexport const cloneNodes = (nodes: Node[]) => map(nodes, (node) => node.clone());\n\nexport const wrapAt = (nodes: Node | Node[], atName: string, atValue: string) =>\n    postcss.atRule({ name: atName, params: atValue }).append(cloneNodes(isArray(nodes) ? nodes : [nodes]));\n\nexport const updateSource = (nodes: AtRule | AtRule[], source?: any) => {\n    return tap(isArray(nodes) ? postcss.root({ nodes }) : nodes, (tree) => tree.walk((node) => (node.source = source)));\n};\n\nexport const cleanComments = (nodes: Node | Node[]): Node[] => {\n    const root = postcss.root({ nodes: isArray(nodes) ? nodes : [nodes] });\n    root.walkComments((comment) => {\n        comment.remove();\n    });\n    return root.nodes;\n};\n\nexport const makeComment = (text: string): Comment => {\n    return postcss.comment({ text });\n};\n\nexport const removeUnusedMarkers = (css: Root): void => {\n    css.walkAtRules(supolkaAt, (at) => {\n        at.remove();\n    });\n    css.walkComments((comment) => {\n        switch (comment.text.trim()) {\n            case `${normalizeChunk} BEGIN`:\n            case `${normalizeChunk} END`:\n            case `${atomicChunk} BEGIN`:\n            case `${atomicChunk} END`:\n                comment.remove();\n                break;\n        }\n    });\n};\n\nexport const removeUnusedStyles = (purge: (string | PurgeCssRawContent)[] | PurgeCssOptions) => {\n    const content = isArray(purge) ? purge : (get(purge, \"content\", []) as string[]);\n    const options = isPlainObject(purge) ? omit(purge, [\"content\"]) : {};\n\n    return postcss([\n        (css: Root) => {\n            css.walkComments((comment) => {\n                switch (comment.text.trim()) {\n                    case `${normalizeChunk} BEGIN`:\n                        comment.after(makeComment(\"purgecss start ignore\"));\n                        break;\n                    case `${normalizeChunk} END`:\n                        comment.before(makeComment(\"purgecss end ignore\"));\n                        break;\n                }\n            });\n        },\n        removeUnusedMarkers,\n        purgecss({\n            content,\n            defaultExtractor: (content: string) => {\n                const broadMatches = content.match(/[^<>\"'`\\s]*[^<>\"'`\\s:]/g) || [];\n                const broadMatchesWithoutTrailingSlash = broadMatches.map((match) => trimEnd(match, \"\\\\\"));\n                const preserved = broadMatches.concat(broadMatchesWithoutTrailingSlash);\n\n                const safelist = [...preserved];\n\n                if (get(options, \"preserveHtmlElements\", true)) {\n                    safelist.push(...tags);\n                }\n\n                return safelist;\n            },\n            ...options\n        })\n    ]);\n};\n\nexport const toRemCss = (px: number, rootPx = 16): string => {\n    const rem = px / rootPx;\n\n    return `${rem}rem`;\n};\n","import { SupolkaPluginOption, SupolkaPluginOptions, SupolkaPluginOptionsFactory, SupolkaTheme } from \"../types\";\nimport { get, toPath, isFunction, isPlainObject, defaults, isArray } from \"lodash\";\n\nexport const resolveOptions = (getOptions: SupolkaPluginOptionsFactory) => {\n    const options = getOptions();\n\n    const theme = get(options, \"theme\", {}) as SupolkaTheme;\n    return defaults(\n        {\n            theme: resolveFunctionKeys(theme, options)\n        },\n        options\n    );\n};\n\nexport const resolveFunctionKeys = (theme: SupolkaTheme, options: SupolkaPluginOptions) => {\n    return Object.keys(theme).reduce((resolved, key) => {\n        const value = isPlainObject(theme[key])\n            ? resolveFunctionKeys(theme[key] as SupolkaTheme, options)\n            : isFunction(theme[key])\n            ? (theme[key] as any)(getTheme(options, false))\n            : theme[key];\n\n        return defaults({ [key]: value }, resolved);\n    }, {});\n};\n\nexport const getOption = (\n    options: SupolkaPluginOptions,\n    key: string | string[],\n    defaultOption?: SupolkaPluginOption\n): SupolkaPluginOption | undefined => get(options, key, defaultOption);\n\nexport const transformThemeOption = (rootKey: string) => {\n    if ([\"fontFamily\"].includes(rootKey)) {\n        return (option: SupolkaPluginOption | undefined) => (isArray(option) ? option.join(\", \") : option || \"\");\n    }\n\n    return (option: SupolkaPluginOption | undefined) => (isFunction(option) ? option() : option || \"\");\n};\n\nexport const getTheme = (options: SupolkaPluginOptions, useTransformation = true) => (\n    key: string,\n    defaultOption?: SupolkaPluginOption\n): SupolkaPluginOption => {\n    const [rootKey, ...keys] = toPath(key);\n    const option = getOption(options, [\"theme\", rootKey, ...keys], defaultOption);\n\n    return useTransformation ? transformThemeOption(rootKey)(option) : option;\n};\n\nexport const rem = (px: TemplateStringsArray) => `rem(${px})`;\n\nexport const spacing = (ratio = 0) => `spacing(${ratio})`;\n","import { fromPairs, map } from \"lodash\";\r\nimport { Node } from \"postcss\";\r\nimport { CssOptions, SupolkaTheme } from \"../types\";\r\nimport { useClassName, parseCss } from \"./css\";\r\nimport { transformThemeOption } from \"./options\";\r\n\r\nexport const createAtomicMicroplugin = (\r\n    options: SupolkaTheme,\r\n    root: string,\r\n    className: string = root\r\n): Promise<Node[]> => {\r\n    const transformValue = transformThemeOption(root);\r\n\r\n    const css = fromPairs<CssOptions>(\r\n        map(options, (value, key) => {\r\n            return [\r\n                useClassName(className, key),\r\n                {\r\n                    [root]: transformValue(value)\r\n                }\r\n            ];\r\n        })\r\n    );\r\n\r\n    return parseCss(css);\r\n};\r\n","import { SupolkaMicroplugin, SupolkaTheme } from \"../../types\";\nimport { createAtomicMicroplugin } from \"../../utils/microplugin\";\n\nconst creator: SupolkaMicroplugin = ({ theme }) => {\n    const options = theme(\"fontSize\") as SupolkaTheme;\n    return createAtomicMicroplugin(options, \"fontSize\", \"fs\");\n};\n\nexport default creator;\n"],"names":["postcss","postcssNested","postcssJs","postcssSelectorParser","get","map","isArray","tap","isPlainObject","omit","purgecss","trimEnd","tags","defaults","isFunction","toPath","fromPairs"],"mappings":"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"}
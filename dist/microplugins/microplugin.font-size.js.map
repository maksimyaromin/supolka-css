{"version":3,"file":"microplugin.font-size.js","sources":["../../src/constants.ts","../../src/utils/css.ts","../../src/utils/options.ts","../../src/plugins/micro/font-size.ts"],"sourcesContent":["export const supolkaAt = \"supolka\";\r\nexport const sectionAt = \"section\";\r\n\r\nexport const normalizeChunk = \"normalize-css\";\r\nexport const atomicChunk = \"atomic-css\";\r\n","import { Dictionary, get, map, isArray, tap, isPlainObject, omit, trimEnd } from \"lodash\";\r\nimport { CssOptions, PurgeCssOptions, PurgeCssRawContent } from \"../types\";\r\nimport postcss, { AtRule, Comment, Node, Root } from \"postcss\";\r\nimport postcssSelectorParser from \"postcss-selector-parser\";\r\nimport postcssNested from \"postcss-nested\";\r\nimport * as postcssJs from \"postcss-js\"; \r\nimport purgecss from \"@fullhuman/postcss-purgecss\";\r\nimport tags from \"html-tags\";\r\nimport { atomicChunk, normalizeChunk, supolkaAt } from \"../constants\";\r\n\r\nexport const useClassName = (root: string, mod?: string): string => {\r\n    const className = mod ? `${root}-${mod}` : root;\r\n    return asClass(escapeClassName(className));\r\n};\r\n\r\nexport const parseCss = (css: Dictionary<CssOptions>): Promise<Node[]> => {\r\n    const output = postcss([postcssNested()])\r\n        .process(css, { parser: postcssJs });\r\n\r\n    return Promise.resolve(output.root.nodes);\r\n};\r\n\r\nexport const parsePlainCss = (input: string): Root => {\r\n    return postcss.parse(input);\r\n};\r\n\r\nexport const escapeCommas = (className: string) =>\r\n    className.replace(/\\\\,/g, \"\\\\2c \");\r\n\r\nexport const escapeClassName = (className: string): string => {\r\n    const node = postcssSelectorParser.className({ value: className });\r\n    return escapeCommas(get(node, \"raws.value\", node.value));\r\n};\r\n\r\nexport const asClass = (className: string): string => `.${className}`;\r\n\r\nexport const cloneNodes = (nodes: Node[]) =>\r\n    map(nodes, (node) => node.clone());\r\n\r\nexport const wrapAt = (nodes: Node | Node[], atName: string, atValue: string) =>\r\n    postcss.atRule({ name: atName, params: atValue })\r\n        .append(cloneNodes(isArray(nodes) ? nodes : [nodes]));\r\n\r\nexport const updateSource = (nodes: AtRule | AtRule[], source?: any) => {\r\n    return tap(\r\n        isArray(nodes) ? postcss.root({ nodes }) : nodes,\r\n        (tree) => tree.walk((node) => (node.source = source))\r\n    );\r\n};\r\n\r\nexport const cleanComments = (nodes: Node | Node[]): Node[] => {\r\n    const root = postcss.root({ nodes: isArray(nodes) ? nodes : [ nodes ] });\r\n    root.walkComments(comment => {\r\n        comment.remove();\r\n    });\r\n    return root.nodes;\r\n};\r\n\r\nexport const makeComment = (text: string): Comment => {\r\n    return postcss.comment({ text });\r\n};\r\n\r\nexport const removeUnusedMarkers = (css: Root): void => {\r\n    css.walkAtRules(supolkaAt, (at) => {\r\n        at.remove();\r\n    });\r\n    css.walkComments(comment => {\r\n        switch (comment.text.trim()) {\r\n            case `${normalizeChunk} BEGIN`:\r\n            case `${normalizeChunk} END`:\r\n            case `${atomicChunk} BEGIN`:\r\n            case `${atomicChunk} END`:\r\n                comment.remove();\r\n                break;\r\n        }\r\n    });\r\n};\r\n\r\nexport const removeUnusedStyles = (purge: (string | PurgeCssRawContent)[] | PurgeCssOptions) => {\r\n    const content = isArray(purge) ? purge : get(purge, \"content\", []) as string[];\r\n    const options = isPlainObject(purge) ? omit(purge, [ \"content\" ]) : {};\r\n    \r\n    return postcss([\r\n        (css: Root) => {\r\n            css.walkComments((comment) => {\r\n                switch (comment.text.trim()) {\r\n                    case `${normalizeChunk} BEGIN`:\r\n                        comment.after(makeComment(\"purgecss start ignore\"));\r\n                        break;\r\n                    case `${normalizeChunk} END`:\r\n                        comment.before(makeComment(\"purgecss end ignore\"));\r\n                        break;\r\n                }\r\n            });\r\n        },\r\n        removeUnusedMarkers,\r\n        purgecss({\r\n            content,\r\n            defaultExtractor: (content: string) => {\r\n                const broadMatches = content.match(/[^<>\"'`\\s]*[^<>\"'`\\s:]/g) || []\r\n                const broadMatchesWithoutTrailingSlash = broadMatches.map((match) => trimEnd(match, '\\\\'))\r\n                const preserved = broadMatches.concat(broadMatchesWithoutTrailingSlash);\r\n\r\n                const safelist = [ ...preserved ];\r\n\r\n                if (get(options, \"preserveHtmlElements\", true)) {\r\n                    safelist.push(...tags);\r\n                }\r\n\r\n                return safelist;\r\n            },\r\n            ...options\r\n        })\r\n    ]);\r\n};\r\n","import { SupolkaPluginOption, SupolkaPluginOptions, SupolkaPluginOptionsFactory, SupolkaTheme } from \"../types\";\r\nimport { get, toPath, isFunction, isPlainObject, defaults } from \"lodash\";\r\n\r\nexport const resolveOptions = (getOptions: SupolkaPluginOptionsFactory) => {\r\n    const options = getOptions();\r\n\r\n    const theme = get(options, \"theme\", {}) as SupolkaTheme;\r\n    return defaults(\r\n        {\r\n            theme: resolveFunctionKeys(theme, options)\r\n        },\r\n        options\r\n    );\r\n};\r\n\r\nexport const resolveFunctionKeys = (theme: SupolkaTheme, options: SupolkaPluginOptions) => {\r\n    return Object.keys(theme).reduce((resolved, key) => {\r\n        const value = isPlainObject(theme[key])\r\n            ? resolveFunctionKeys(theme[key] as SupolkaTheme, options)\r\n            : isFunction(theme[key])\r\n                ? (theme[key] as any)(getTheme(options))\r\n                : theme[key];\r\n        \r\n        return defaults({ [key]: value }, resolved);\r\n    }, {});\r\n};\r\n\r\nexport const getOption = (\r\n    options: SupolkaPluginOptions,\r\n    key: string | string[],\r\n    defaultOption?: SupolkaPluginOption\r\n): SupolkaPluginOption | undefined => get(options, key, defaultOption);\r\n\r\nexport const transformThemeOption = (rootKey: string) => {\r\n    return (option: SupolkaPluginOption | undefined) => isFunction(option)\r\n        ? option()\r\n        : option || \"\";\r\n}\r\n\r\nexport const getTheme = (options: SupolkaPluginOptions) =>\r\n    (key: string, defaultOption?: SupolkaPluginOption): SupolkaPluginOption => {\r\n        const [ rootKey, ...keys ] = toPath(key);\r\n        const option = getOption(options, [ \"theme\", rootKey, ...keys ], defaultOption);\r\n\r\n        return transformThemeOption(rootKey)(option);\r\n    }","import { CssOptions, SupolkaMicroplugin } from \"../../types\";\r\nimport { map, fromPairs } from \"lodash\";\r\nimport { useClassName, parseCss } from \"../../utils/css\";\r\nimport { transformThemeOption } from \"../../utils/options\";\r\n\r\nconst creator: SupolkaMicroplugin = ({ theme }) => {\r\n    const option = theme(\"fontSize\") as { [key: string]: number | string };\r\n    const transformValue = transformThemeOption(\"fontSize\");\r\n\r\n    const css = fromPairs<CssOptions>(map(option, (value, key) => {\r\n        return [\r\n            useClassName(\"font-size\", key),\r\n            {\r\n                fontSize: transformValue(value)\r\n            }\r\n        ]\r\n    }));\r\n\r\n    return parseCss(css);\r\n};\r\n\r\nexport default creator;\r\n"],"names":["postcss","postcssNested","postcssJs","postcssSelectorParser","get","map","isArray","tap","isPlainObject","omit","purgecss","trimEnd","tags","defaults","isFunction","toPath","fromPairs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAAa,SAAS,GAAG,UAAU;MACtB,SAAS,GAAG,UAAU;MAEtB,cAAc,GAAG,gBAAgB;MACjC,WAAW,GAAG;;ACMpB,MAAM,YAAY,GAAG,CAAC,IAAY,EAAE,GAAY;IACnD,MAAM,SAAS,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,GAAG,EAAE,GAAG,IAAI,CAAC;IAChD,OAAO,OAAO,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC;AAC/C,CAAC,CAAC;AAEK,MAAM,QAAQ,GAAG,CAAC,GAA2B;IAChD,MAAM,MAAM,GAAGA,2BAAO,CAAC,CAACC,iCAAa,EAAE,CAAC,CAAC;SACpC,OAAO,CAAC,GAAG,EAAE,EAAE,MAAM,EAAEC,oBAAS,EAAE,CAAC,CAAC;IAEzC,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC9C,CAAC,CAAC;MAEW,aAAa,GAAG,CAAC,KAAa;IACvC,OAAOF,2BAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAChC,EAAE;AAEK,MAAM,YAAY,GAAG,CAAC,SAAiB,KAC1C,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AAEhC,MAAM,eAAe,GAAG,CAAC,SAAiB;IAC7C,MAAM,IAAI,GAAGG,yCAAqB,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC;IACnE,OAAO,YAAY,CAACC,UAAG,CAAC,IAAI,EAAE,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;AAC7D,CAAC,CAAC;AAEK,MAAM,OAAO,GAAG,CAAC,SAAiB,KAAa,IAAI,SAAS,EAAE,CAAC;AAE/D,MAAM,UAAU,GAAG,CAAC,KAAa,KACpCC,UAAG,CAAC,KAAK,EAAE,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;MAE1B,MAAM,GAAG,CAAC,KAAoB,EAAE,MAAc,EAAE,OAAe,KACxEL,2BAAO,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC;KAC5C,MAAM,CAAC,UAAU,CAACM,cAAO,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MAEjD,YAAY,GAAG,CAAC,KAAwB,EAAE,MAAY;IAC/D,OAAOC,UAAG,CACND,cAAO,CAAC,KAAK,CAAC,GAAGN,2BAAO,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,GAAG,KAAK,EAChD,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC,CACxD,CAAC;AACN,EAAE;MAEW,aAAa,GAAG,CAAC,KAAoB;IAC9C,MAAM,IAAI,GAAGA,2BAAO,CAAC,IAAI,CAAC,EAAE,KAAK,EAAEM,cAAO,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,CAAE,KAAK,CAAE,EAAE,CAAC,CAAC;IACzE,IAAI,CAAC,YAAY,CAAC,OAAO;QACrB,OAAO,CAAC,MAAM,EAAE,CAAC;KACpB,CAAC,CAAC;IACH,OAAO,IAAI,CAAC,KAAK,CAAC;AACtB,EAAE;MAEW,WAAW,GAAG,CAAC,IAAY;IACpC,OAAON,2BAAO,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;AACrC,EAAE;MAEW,mBAAmB,GAAG,CAAC,GAAS;IACzC,GAAG,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,EAAE;QAC1B,EAAE,CAAC,MAAM,EAAE,CAAC;KACf,CAAC,CAAC;IACH,GAAG,CAAC,YAAY,CAAC,OAAO;QACpB,QAAQ,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE;YACvB,KAAK,GAAG,cAAc,QAAQ,CAAC;YAC/B,KAAK,GAAG,cAAc,MAAM,CAAC;YAC7B,KAAK,GAAG,WAAW,QAAQ,CAAC;YAC5B,KAAK,GAAG,WAAW,MAAM;gBACrB,OAAO,CAAC,MAAM,EAAE,CAAC;gBACjB,MAAM;SACb;KACJ,CAAC,CAAC;AACP,EAAE;MAEW,kBAAkB,GAAG,CAAC,KAAwD;IACvF,MAAM,OAAO,GAAGM,cAAO,CAAC,KAAK,CAAC,GAAG,KAAK,GAAGF,UAAG,CAAC,KAAK,EAAE,SAAS,EAAE,EAAE,CAAa,CAAC;IAC/E,MAAM,OAAO,GAAGI,oBAAa,CAAC,KAAK,CAAC,GAAGC,WAAI,CAAC,KAAK,EAAE,CAAE,SAAS,CAAE,CAAC,GAAG,EAAE,CAAC;IAEvE,OAAOT,2BAAO,CAAC;QACX,CAAC,GAAS;YACN,GAAG,CAAC,YAAY,CAAC,CAAC,OAAO;gBACrB,QAAQ,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE;oBACvB,KAAK,GAAG,cAAc,QAAQ;wBAC1B,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,uBAAuB,CAAC,CAAC,CAAC;wBACpD,MAAM;oBACV,KAAK,GAAG,cAAc,MAAM;wBACxB,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,qBAAqB,CAAC,CAAC,CAAC;wBACnD,MAAM;iBACb;aACJ,CAAC,CAAC;SACN;QACD,mBAAmB;QACnBU,4BAAQ,iBACJ,OAAO,EACP,gBAAgB,EAAE,CAAC,OAAe;gBAC9B,MAAM,YAAY,GAAG,OAAO,CAAC,KAAK,CAAC,yBAAyB,CAAC,IAAI,EAAE,CAAA;gBACnE,MAAM,gCAAgC,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,KAAK,KAAKC,cAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAA;gBAC1F,MAAM,SAAS,GAAG,YAAY,CAAC,MAAM,CAAC,gCAAgC,CAAC,CAAC;gBAExE,MAAM,QAAQ,GAAG,CAAE,GAAG,SAAS,CAAE,CAAC;gBAElC,IAAIP,UAAG,CAAC,OAAO,EAAE,sBAAsB,EAAE,IAAI,CAAC,EAAE;oBAC5C,QAAQ,CAAC,IAAI,CAAC,GAAGQ,wBAAI,CAAC,CAAC;iBAC1B;gBAED,OAAO,QAAQ,CAAC;aACnB,IACE,OAAO,EACZ;KACL,CAAC,CAAC;AACP;;MC/Ga,cAAc,GAAG,CAAC,UAAuC;IAClE,MAAM,OAAO,GAAG,UAAU,EAAE,CAAC;IAE7B,MAAM,KAAK,GAAGR,UAAG,CAAC,OAAO,EAAE,OAAO,EAAE,EAAE,CAAiB,CAAC;IACxD,OAAOS,eAAQ,CACX;QACI,KAAK,EAAE,mBAAmB,CAAC,KAAK,EAAE,OAAO,CAAC;KAC7C,EACD,OAAO,CACV,CAAC;AACN,EAAE;AAEK,MAAM,mBAAmB,GAAG,CAAC,KAAmB,EAAE,OAA6B;IAClF,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,GAAG;QAC3C,MAAM,KAAK,GAAGL,oBAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;cACjC,mBAAmB,CAAC,KAAK,CAAC,GAAG,CAAiB,EAAE,OAAO,CAAC;cACxDM,iBAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;kBACjB,KAAK,CAAC,GAAG,CAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;kBACtC,KAAK,CAAC,GAAG,CAAC,CAAC;QAErB,OAAOD,eAAQ,CAAC,EAAE,CAAC,GAAG,GAAG,KAAK,EAAE,EAAE,QAAQ,CAAC,CAAC;KAC/C,EAAE,EAAE,CAAC,CAAC;AACX,CAAC,CAAC;AAEK,MAAM,SAAS,GAAG,CACrB,OAA6B,EAC7B,GAAsB,EACtB,aAAmC,KACDT,UAAG,CAAC,OAAO,EAAE,GAAG,EAAE,aAAa,CAAC,CAAC;AAEhE,MAAM,oBAAoB,GAAG,CAAC,OAAe;IAChD,OAAO,CAAC,MAAuC,KAAKU,iBAAU,CAAC,MAAM,CAAC;UAChE,MAAM,EAAE;UACR,MAAM,IAAI,EAAE,CAAC;AACvB,CAAC,CAAA;MAEY,QAAQ,GAAG,CAAC,OAA6B,KAClD,CAAC,GAAW,EAAE,aAAmC;IAC7C,MAAM,CAAE,OAAO,EAAE,GAAG,IAAI,CAAE,GAAGC,aAAM,CAAC,GAAG,CAAC,CAAC;IACzC,MAAM,MAAM,GAAG,SAAS,CAAC,OAAO,EAAE,CAAE,OAAO,EAAE,OAAO,EAAE,GAAG,IAAI,CAAE,EAAE,aAAa,CAAC,CAAC;IAEhF,OAAO,oBAAoB,CAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;AACjD;;MCxCE,OAAO,GAAuB,CAAC,EAAE,KAAK,EAAE;IAC1C,MAAM,MAAM,GAAG,KAAK,CAAC,UAAU,CAAuC,CAAC;IACvE,MAAM,cAAc,GAAG,oBAAoB,CAAW,CAAC,CAAC;IAExD,MAAM,GAAG,GAAGC,gBAAS,CAAaX,UAAG,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,GAAG;QACrD,OAAO;YACH,YAAY,CAAC,WAAW,EAAE,GAAG,CAAC;YAC9B;gBACI,QAAQ,EAAE,cAAc,CAAC,KAAK,CAAC;aAClC;SACJ,CAAA;KACJ,CAAC,CAAC,CAAC;IAEJ,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;AACzB;;;;;;;;;;;;;;;;;"}